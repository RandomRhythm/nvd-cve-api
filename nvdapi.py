import json
import urllib.request
from urllib.parse import quote_plus, urlencode
import re
from datetime import datetime, timedelta
import logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG)

class NVDAPI:
    def __init__(self):
        self.base_url = 'https://services.nvd.nist.gov/rest/json'
        self.cve_path = '/cve/1.0'
        self.cves_path = '/cves/1.0'

    def is_valid_cve(self, cve_id):
        if re.match(r'^CVE-\d+-\d+$', cve_id):
            return True
        else:
            return False

    def get_nvd_response(self, url):
        logging.debug(f'fetching {url}')
        with urllib.request.urlopen(url) as response:
            if response.status == 200:
                logging.debug("fetch_success")
                return json.loads(response.read())
            else:
                logging.debug("fetch_failed")
                return Nones

    def get_cve_by_id(self, cve_id):
        if not self.is_valid_cve(cve_id):
            logging.error(f"invalid cve-id {cve_id}")
            return None
        nvd_response = self.get_nvd_response(f"{self.base_url}{self.cve_path}/{cve_id}")
        return nvd_response["result"]

    def get_cves_response(self, start_index=0, mod_start_date=None):
        qs = {
            "startIndex": start_index,
            "resultsPerPage": 1000 ## Max available
        }
        if mod_start_date:
            mod_start_date = mod_start_date.strftime('%Y-%m-%dT%H:%M:%S:%f')[:-3] + ' UTC+07:00'
            qs["modStartDate"] = mod_start_date
        query_string = urlencode(qs, doseq=False)
        final_url = f"{self.base_url}{self.cves_path}?{query_string}"
        return self.get_nvd_response(final_url)

    def get_cves_last_n_min(self, last_n_min):
        time_since = datetime.now() - timedelta(minutes=last_n_min)
        logging.info(f"fetching cve since {time_since}")
        ## First Fetch
        start_index = 0
        response = self.get_cves_response(start_index, time_since)
        cves_fetched = response['result']['CVE_Items']
        remaining = response['totalResults'] - len(cves_fetched)
        logging.debug(f'fetched: {len(cves_fetched)} / {response["totalResults"]}')
        while remaining > 0:
            start_index += len(cves_fetched)
            response = self.get_cves_response(start_index, time_since)
            logging.debug(len(response['result']['CVE_Items']))
            cves_fetched += response['result']['CVE_Items']
            remaining = response['totalResults'] - len(cves_fetched)
            logging.debug(f'fetched: {len(cves_fetched)} / {response["totalResults"]}')
        return cves_fetched
        


