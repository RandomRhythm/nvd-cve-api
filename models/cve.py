from cve_models import CVE

class CPE_Name:
    def __init__(self, cpe22Uri, cpe23Uri, lastModifiedDate) -> None:
        self.cpe22Uri : str = cpe22Uri
        self.cpe23Uri : str = cpe23Uri
        self.lastModifiedDate : str = lastModifiedDate

class CPE_Match:
    def __init__(self, vulnerable, cpe22Uri, cpe23Uri, versionStartExcluding, versionStartIncluding, versionEndExcluding, versionEndIncluding, cpe_name) -> None:
        self.vulnerable : bool = vulnerable
        self.cpe22Uri : str = cpe22Uri
        self.cpe23Uri : str = cpe23Uri
        self.versionStartExcluding : str = versionStartExcluding
        self.versionStartIncluding : str = versionStartIncluding
        self.versionEndExcluding : str = versionEndExcluding
        self.versionEndIncluding : str = versionEndIncluding
        self.cpe_name : CPE_Name = cpe_name

class Node:
    def __init__(self, operator, negate, children, cpe_match) -> None:
        self.operator : str = operator
        self.negate : bool = negate
        self.children : list = children
        self.cpe_match : list = cpe_match

class Configurations:
    def __init__(self, cve_data_version, nodes) -> None:
        self.cve_data_version : str = cve_data_version
        self.nodes : list = nodes

# class Subscore:
#     def __init__(self, subscore) -> None:

class CVSSV2:
    def __init__(self) -> None:
        pass

class CVSSV3:
    def __init__(self) -> None:
        pass

class BaseMetricV3:
    def __init__(self, cvssV3, exploitabilityScore, impact_score) -> None:
        pass        

class Impact:
    def __init__(self, baseMetricV3, baseMetricV2) -> None:
        pass

class CVE_Items:
    def __init__(self, cve, configurations, impact, publishedDaate, lastModifiedDate):
        self.cve : CVE = cve
        self.configurations : Configurations = configurations
        self.impact : Impact = impact
        self.publishedDate = publishedDaate
        self.lastModifiedDate = lastModifiedDate

class CVE_(object):

    def __init__(self, json_data):
        self.cve(json_data['cve'])
        if 'configurations' in json_data.keys():
            self.configurations(json_data['configurations'])
        if 'impact' in json_data.keys():
            self.impact(json_data['impact'])
        self.published_date = json_data['publishedDate']
        self.last_modified_date = json_data['lastModifiedDate']

    def cve(self, cve_data):
        self.cve_id = cve_data['CVE_data_meta']['ID']
        self.references = self.build_reference(cve_data['references']['reference_data'])
        self.description = self.get_description(cve_data['description']['description_data'])
        self.vulnerable = False
        self.matched_product = ""
        # TEST
        with open('products.txt', 'r') as f:
            products = list(set(map(str.strip, f.readlines())))
            desc_lower = [_ for _ in self.description.lower().split(' ') if len(_) > 1]
            #print(desc_lower)
            for product in products:
                uniq_word = list(map(str.lower, set(product.split(' '))))
                if set(uniq_word).issubset(set(desc_lower)):
                    print(f'Found Possible Vulnerability for "{product}"')
                    self.vulnerable = True
                    self.matched_product = product
    
    def configurations(self, configuration_data):
        self.cpe = self.build_cpe(configuration_data)

    def impact(self, impact_data):
        cvss = None
        if 'baseMetricV3' in impact_data.keys():
            cvss = impact_data['baseMetricV3']['cvssV3']    
        elif 'baseMetricV3' in impact_data.key():
            cvss = impact_data['baseMetricV2']['cvssV2']
        else:
            print(impact_data)
            cvss = None
        self.cvss_score = cvss['baseScore']
        self.cvss_vector = cvss['vectorString']
        self.cvss_version = cvss['version']
        if 'baseSeverity' in cvss.keys():
            self.cvss_severity = cvss['baseSeverity']

    def build_reference(self, references):
        ref_string = ''
        for ref in references:
            ref_string += self.format_ref(ref)
        return ref_string

    def format_ref(self, ref):
        base = f"{ref['name']} {ref['url']} {ref['refsource']}"
        if 'tags' in ref.keys():
            return f"{base} [{'|'.join(ref['tags'])}]\n"
        return f'{base}\n'

    def build_cpe(self, cpes):
        nodes = cpes['nodes']
        cpe_string = ''
        for node in nodes:
            cpe_string += self.build_cpe_node(node)
        return cpe_string
            
    def build_cpe_node(self, node):
        node_string = ''
        affected = []
        running_on = []
        ## Duplicate Code
        ### Detailed CPE NODE
        if 'children' in node.keys():
            for node_item in node['children']:
                for match in node_item['cpe_match']:
                    uri = match['cpe23Uri']
                    start = match['versionStartIncluding'] if 'versionStartIncluding' in match.keys() else '-'
                    end = match['versionEndExcluding'] if 'versionEndExcluding' in match.keys() else '-'
                    if match['vulnerable']:
                        affected += [self.build_cpe_item(uri, start, end)]
                    else:
                        running_on += [self.build_cpe_item(uri, start, end)]
        else:
            for match in node['cpe_match']:
                uri = match['cpe23Uri']
                start = match['versionStartIncluding'] if 'versionStartIncluding' in match.keys() else '-'
                end = match['versionEndExcluding'] if 'versionEndExcluding' in match.keys() else '-'
                if match['vulnerable']:
                    affected += [self.build_cpe_item(uri, start, end)]
                else:
                    running_on += [self.build_cpe_item(uri, start, end)]
        if len(affected) > 0:
            node_string += f'Configuration:\n' + ''.join(affected)
        if len(running_on) > 0:
            node_string += f'Running with/on:\n' + ''.join(running_on)
        return node_string + '-' * 20 + '\n'

    def build_cpe_item(self, uri, start, end):
        return f'{uri} From: {start} To: {end}\n'

    def get_description(self, description_data):
        for description in description_data:
            if description['lang'] == 'en':
                return description['value']
        else:
            return "No EN Description"

